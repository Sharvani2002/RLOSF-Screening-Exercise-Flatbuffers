// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCREENINGSCHEMA_MYGAME_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SCREENINGSCHEMA_MYGAME_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace MyGame {
namespace Sample {

struct ScreeningTable;
struct ScreeningTableBuilder;

struct ScreeningTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ScreeningTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_NAME = 4,
    VT_A_VALUE = 6,
    VT_A_FLAG = 8
  };
  const flatbuffers::String *a_name() const {
    return GetPointer<const flatbuffers::String *>(VT_A_NAME);
  }
  float a_value() const {
    return GetField<float>(VT_A_VALUE, 0.0f);
  }
  bool a_flag() const {
    return GetField<uint8_t>(VT_A_FLAG, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_A_NAME) &&
           verifier.VerifyString(a_name()) &&
           VerifyField<float>(verifier, VT_A_VALUE, 4) &&
           VerifyField<uint8_t>(verifier, VT_A_FLAG, 1) &&
           verifier.EndTable();
  }
};

struct ScreeningTableBuilder {
  typedef ScreeningTable Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a_name(flatbuffers::Offset<flatbuffers::String> a_name) {
    fbb_.AddOffset(ScreeningTable::VT_A_NAME, a_name);
  }
  void add_a_value(float a_value) {
    fbb_.AddElement<float>(ScreeningTable::VT_A_VALUE, a_value, 0.0f);
  }
  void add_a_flag(bool a_flag) {
    fbb_.AddElement<uint8_t>(ScreeningTable::VT_A_FLAG, static_cast<uint8_t>(a_flag), 0);
  }
  explicit ScreeningTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ScreeningTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ScreeningTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<ScreeningTable> CreateScreeningTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> a_name = 0,
    float a_value = 0.0f,
    bool a_flag = false) {
  ScreeningTableBuilder builder_(_fbb);
  builder_.add_a_value(a_value);
  builder_.add_a_name(a_name);
  builder_.add_a_flag(a_flag);
  return builder_.Finish();
}

inline flatbuffers::Offset<ScreeningTable> CreateScreeningTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *a_name = nullptr,
    float a_value = 0.0f,
    bool a_flag = false) {
  auto a_name__ = a_name ? _fbb.CreateString(a_name) : 0;
  return MyGame::Sample::CreateScreeningTable(
      _fbb,
      a_name__,
      a_value,
      a_flag);
}

}  // namespace Sample
}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_SCREENINGSCHEMA_MYGAME_SAMPLE_H_
